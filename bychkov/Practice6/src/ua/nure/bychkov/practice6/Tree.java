package ua.nure.bychkov.practice6;

public class Tree <E extends Comparable<E>> {
    // добавляет элемент в контейнер
    // если в контейнере есть элемент равный по compareTo добавляемому,
    // то добавления не происходит и метод возвращает false
    // в противном случае элемент попадает в контейнер и метод возвращает true
    // первый добавляемый элемент становится корнем дерева
    // автобалансировки в дереве нет
    public boolean add(E element) {...}

    // добавляет все элементы из массива в контейнер (вызов в цикле метода add, см. выше)
    public void add(E[] elements) {...}

    // удаляет элемент из контейнера
    // если удаляемого элемента в контейнере нет, то возвращает false
    // в противном случае удаляет элемент и возвращает true
    // ВАЖНО! при удалении элемента дерево не должно потерять свойства бинарного дерева поиска
    public boolean remove(E element) {...}

    // распечатывает дерево, так чтобы было видно его древовидную структуру, см. ниже пример
    public void print() {...}

    // вложенный класс, объекты этого класса составляют дерево
    private static class Node<E> {...}
}
